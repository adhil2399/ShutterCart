<%- include('../partials/admin/header') %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <style>
        .error-message {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .image-upload-container {
            border: 2px dashed #e5e7eb;
            border-radius: 0.5rem;
            padding: 2rem;
            text-align: center;
            transition: all 0.3s ease;
        }

        .image-upload-container:hover {
            border-color: #3b82f6;
        }

        .image-preview-container {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-top: 1rem;
        }

        .image-preview {
            position: relative;
            width: 100px;
            height: 100px;
            border-radius: 0.375rem;
            overflow: hidden;
        }

        .image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .remove-image {
            position: absolute;
            top: 0.25rem;
            right: 0.25rem;
            background-color: #ef4444;
            color: white;
            border: none;
            border-radius: 9999px;
            width: 1.5rem;
            height: 1.5rem;
            font-size: 0.75rem;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .image-preview:hover .remove-image {
            opacity: 1;
        }

        .cropper-content {
            position: relative;
            background-color: white;
            padding: 1rem;
            border-radius: 0.5rem;
            max-width: 600px;
            width: 90%;
            max-height: 600px;
            overflow: auto;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .cropper-container {
            display: flex;
            align-items: center;
            justify-content: center;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1050;
            overflow: auto;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.375rem;
            font-weight: 500;
            padding: 0.5rem 1rem;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background-color: #3b82f6;
            color: white;
        }

        .btn-primary:hover {
            background-color: #2563eb;
        }

        .btn-secondary {
            background-color: #e5e7eb;
            color: #1f2937;
        }

        .btn-secondary:hover {
            background-color: #d1d5db;
        }
    </style>
</head>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form id="editProductForm" action="/admin/editProducts/<%= product._id %>" enctype="multipart/form-data">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" value="<%= product.productName %>" class="form-control" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select" name="brand">
                                <option value="">Choose a brand</option>
                                <% brand.forEach(element => { %>
                                    <option value="<%= element.brandName %>" <%= product.brand === element.brandName ? 'selected' : '' %>><%= element.brandName %></option>
                                <% }) %>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control" rows="4"><%= product.description %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="$" name="regularPrice" type="number" step="0.01" class="form-control" value="<%= product.regularPrice %>">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale price</label>
                                    <input placeholder="$" name="salePrice" type="number" step="0.01" class="form-control" value="<%= product.salePrice %>">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input placeholder="" name="quantity" type="number" class="form-control" value="<%= product.quantity %>">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Category</label>
                            <select class="form-select" name="category">
                                <option value="">Choose a category</option>
                                <% cat.forEach(element => { %>
                                    <option value="<%= element.name %>" <%= product.category.name === element.name ? 'selected' : '' %>><%= element.name %></option>
                                <% }) %>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Product Images</label>
                            <div class="image-upload-container" id="dropZone">
                                <p>Drag & drop images here or click to select</p>
                                <input type="file" id="fileInput" name="images" multiple accept="image/*" style="display: none;">
                            </div>
                            <div class="image-preview-container" id="imagePreviewContainer">
                                <% product.productImage.forEach((image, index) => { %>
                                    <div class="image-preview">
                                        <img src="<%= image %>" alt="Product image <%= index + 1 %>">
                                        <button type="button" class="remove-image" data-index="<%= index %>">&times;</button>
                                    </div>
                                <% }) %>
                            </div>
                            <div id="images-error" class="error-message"></div>
                        </div>
                        <div>
                            <button class="btn btn-primary" type="submit">Update</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<div id="cropperContainer" class="cropper-container" style="display: none;">
    <div class="cropper-content">
        <img id="cropperImage" src="" alt="Image to crop" style="max-width: 100%; display: block;">
        <div class="mt-4">
            <button id="cropButton" class="btn btn-primary mr-2">Crop & Save</button>
            <button id="cancelCropButton" class="btn btn-secondary">Cancel</button>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<%- include('../partials/admin/footer') %>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('editProductForm');
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const imagePreviewContainer = document.getElementById('imagePreviewContainer');
        const cropperContainer = document.getElementById('cropperContainer');
        const cropperImage = document.getElementById('cropperImage');
        const cropButton = document.getElementById('cropButton');
        const cancelCropButton = document.getElementById('cancelCropButton');
        let cropper = null;
        let currentFileIndex = null;
        const maxImages = 6;
        const croppedImages = [];
        const removedImages = [];

        // Drag and drop functionality
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, unhighlight, false);
        });

        function highlight() {
            dropZone.classList.add('border-blue-500');
        }

        function unhighlight() {
            dropZone.classList.remove('border-blue-500');
        }

        dropZone.addEventListener('drop', handleDrop, false);
        dropZone.addEventListener('click', () => fileInput.click());
        
        fileInput.addEventListener('change', (e) => {
            handleFiles(e.target.files);
        });

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFiles(files);
        }

        function handleFiles(files) {
            const totalImages = document.querySelectorAll('.image-preview').length + files.length;
            if (totalImages > maxImages) {
                Swal.fire({
                    icon: 'error',
                    title: 'Too Many Images',
                    text: `You can only upload a maximum of ${maxImages} images.`,
                    confirmButtonText: 'OK'
                });
                return;
            }
            
            [...files].forEach((file, index) => {
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        showCropper(e.target.result);
                    };
                    reader.readAsDataURL(file);
                }
            });
        }

        function showCropper(imageSrc) {
            cropperImage.src = imageSrc;
            cropperContainer.style.display = 'flex';
            if (cropper) {
                cropper.destroy();
            }
            cropper = new Cropper(cropperImage, {
                aspectRatio: 1,
                viewMode: 1,
                minCropBoxWidth: 400,
                minCropBoxHeight: 400,
                ready: function() {
                    this.cropper.setCropBoxData({
                        width: Math.min(this.cropper.getContainerData().width, 500),
                        height: Math.min(this.cropper.getContainerData().height, 500)
                    });
                }
            });
        }

        function updateImagePreviews() {
            const currentPreviews = document.querySelectorAll('.image-preview');
            const currentImages = Array.from(currentPreviews).map(preview => {
                const img = preview.querySelector('img');
                return img.src;
            });

            imagePreviewContainer.innerHTML = '';

            currentImages.forEach((imageSrc, index) => {
                const previewElement = document.createElement('div');
                previewElement.className = 'image-preview';
                previewElement.innerHTML = `
                    <img src="${imageSrc}" alt="Product image ${index + 1}">
                    <button type="button" class="remove-image" data-index="${index}">&times;</button>
                `;
                imagePreviewContainer.appendChild(previewElement);

                previewElement.querySelector('.remove-image').addEventListener('click', function() {
                    Swal.fire({
                        title: 'Remove Image?',
                        text: 'Are you sure you want to remove this image?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, remove it!',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            const imgPath = imageSrc.split('/uploads/')[1];
                            if (imgPath) {
                                removedImages.push('/uploads/' + imgPath);
                            }
                            previewElement.remove();
                            Swal.fire(
                                'Removed!',
                                'The image has been removed.',
                                'success'
                            );
                        }
                    });
                });
            });

            croppedImages.forEach((imageSrc, index) => {
                const previewElement = document.createElement('div');
                previewElement.className = 'image-preview';
                previewElement.innerHTML = `
                    <img src="${imageSrc}" alt="New product image ${index + 1}">
                    <button type="button" class="remove-image" data-index="${currentImages.length + index}">&times;</button>
                `;
                imagePreviewContainer.appendChild(previewElement);

                previewElement.querySelector('.remove-image').addEventListener('click', function() {
                    Swal.fire({
                        title: 'Remove Image?',
                        text: 'Are you sure you want to remove this image?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, remove it!',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            croppedImages.splice(index, 1);
                            updateImagePreviews();
                            Swal.fire(
                                'Removed!',
                                'The image has been removed.',
                                'success'
                            );
                        }
                    });
                });
            });
        }

        updateImagePreviews();

        cropButton.addEventListener('click', () => {
            const canvas = cropper.getCroppedCanvas({
                width: 440,
                height: 440,
                imageSmoothingQuality: 'medium'
            });
            
            canvas.toBlob((blob) => {
                const reader = new FileReader();
                reader.onloadend = () => {
                    const base64data = reader.result;
                    croppedImages.push(base64data);
                    updateImagePreviews();
                    closeCropper();
                };
                reader.readAsDataURL(blob);
            }, 'image/jpeg', 0.8); // Compress to JPEG with 80% quality
        });

        function closeCropper() {
            cropperContainer.style.display = 'none';
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
            currentFileIndex = null;
        }

        cancelCropButton.addEventListener('click', closeCropper);

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            if (validateForm()) {
                const formData = new FormData(form);
                
                // Add removed images to formData
                if (removedImages.length > 0) {
                    formData.append('removedImages', JSON.stringify(removedImages));
                }

                // Add remaining existing images
                const remainingImages = [];
                document.querySelectorAll('.image-preview img').forEach(img => {
                    const imgSrc = img.src;
                    if (imgSrc.includes('/uploads/')) {
                        const imgPath = '/uploads/' + imgSrc.split('/uploads/')[1];
                        if (!removedImages.includes(imgPath)) {
                            remainingImages.push(imgPath);
                        }
                    }
                });
                formData.append('remainingImages', JSON.stringify(remainingImages));

                // Add new cropped images - split into smaller chunks if needed
                if (croppedImages.length > 0) {
                    // Send each image separately
                    croppedImages.forEach((base64Image, index) => {
                        formData.append(`croppedImage${index}`, base64Image);
                    });
                    formData.append('croppedImagesCount', croppedImages.length);
                }

                // Submit the form
                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => Promise.reject(err));
                    }
                    return response.text().then(text => {
                        try {
                            return text ? JSON.parse(text) : {}
                        } catch (e) {
                            return {}
                        }
                    });
                })
                .then(data => {
                    if (data.message && !data.success) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message,
                            confirmButtonText: 'Try Again'
                        });
                    } else {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Product updated successfully',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            window.location.href = '/admin/products';
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'An error occurred while updating the product',
                        confirmButtonText: 'Try Again'
                    });
                });
            }
        });

        function validateForm() {
            let isValid = true;
            const errorElements = document.querySelectorAll('.error-message');
            errorElements.forEach(element => element.textContent = '');

            const productName = document.getElementById('product_name').value;
            const brand = document.querySelector('select[name="brand"]').value;
            const description = document.getElementById('descriptionid').value;
            const regularPrice = document.querySelector('input[name="regularPrice"]').value;
            const salePrice = document.querySelector('input[name="salePrice"]').value;
            const quantity = document.querySelector('input[name="quantity"]').value;
            const category = document.querySelector('select[name="category"]').value;

            if (!productName.trim()) {
                document.getElementById('productName-error').textContent = 'Product name is required';
                isValid = false;
            }

            if (!brand) {
                document.getElementById('brand-error').textContent = 'Brand is required';
                isValid = false;
            }

            if (!description.trim()) {
                document.getElementById('description-error').textContent = 'Description is required';
                isValid = false;
            }

            if (!regularPrice || regularPrice <= 0) {
                document.getElementById('regularPrice-error').textContent = 'Valid regular price is required';
                isValid = false;
            }

            if (salePrice && parseFloat(salePrice) > parseFloat(regularPrice)) {
                document.getElementById('salePrice-error').textContent = 'Sale price cannot be greater than regular price';
                isValid = false;
            }

            if (!quantity || quantity < 0) {
                document.getElementById('quantity-error').textContent = 'Valid quantity is required';
                isValid = false;
            }

            if (!category) {
                document.getElementById('category-error').textContent = 'Category is required';
                isValid = false;
            }

            return isValid;
        }
    });

    window.addEventListener('resize', function () {
        if (cropper) {
            const containerData = cropper.getContainerData();
            cropper.setCropBoxData({
                width: Math.min(containerData.width, 300),
                height: Math.min(containerData.height, 300),
            });
        }
    });
 
</script>
<%- include('../partials/admin/footer') %>