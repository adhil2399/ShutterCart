<%- include('../partials/admin/header') %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <style>
        .error-message {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .image-upload-container {
            border: 2px dashed #e5e7eb;
            border-radius: 0.5rem;
            padding: 2rem;
            text-align: center;
            transition: all 0.3s ease;
        }

        .image-upload-container:hover {
            border-color: #3b82f6;
        }

        .image-preview-container {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-top: 1rem;
        }

        .image-preview {
            position: relative;
            width: 100px;
            height: 100px;
            border-radius: 0.375rem;
            overflow: hidden;
        }

        .image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .remove-image {
            position: absolute;
            top: 0.25rem;
            right: 0.25rem;
            background-color: #ef4444;
            color: white;
            border: none;
            border-radius: 9999px;
            width: 1.5rem;
            height: 1.5rem;
            font-size: 0.75rem;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .image-preview:hover .remove-image {
            opacity: 1;
        }

        .cropper-content {
            position: relative;
            background-color: white;
            padding: 1rem;
            border-radius: 0.5rem;
            max-width: 600px;
            width: 90%;
            max-height: 600px;
            overflow: auto;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .cropper-container {
            display: flex;
            align-items: center;
            justify-content: center;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1050;
            overflow: auto;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 0.375rem;
            font-weight: 500;
            padding: 0.5rem 1rem;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background-color: #3b82f6;
            color: white;
        }

        .btn-primary:hover {
            background-color: #2563eb;
        }

        .btn-secondary {
            background-color: #e5e7eb;
            color: #1f2937;
        }

        .btn-secondary:hover {
            background-color: #d1d5db;
        }
    </style>
</head>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form id="editProductForm" method="post" action="/admin/editProducts/<%= product._id %>" enctype="multipart/form-data">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" value="<%= product.productName %>" class="form-control" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select" name="brand">
                                <option value="">Choose a brand</option>
                                <% brand.forEach(element => { %>
                                    <option value="<%= element.brandName %>" <%= product.brand === element.brandName ? 'selected' : '' %>><%= element.brandName %></option>
                                <% }) %>
                            </select>
                            <div ```html
                            id="brand-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control" rows="4"><%= product.description %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="$" name="regularPrice" type="number" step="0.01" class="form-control" value="<%= product.regularPrice %>">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale price</label>
                                    <input placeholder="$" name="salePrice" type="number" step="0.01" class="form-control" value="<%= product.salePrice %>">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input placeholder="" name="quantity" type="number" class="form-control" value="<%= product.quantity %>">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Category</label>
                            <select class="form-select" name="category">
                                <option value="">Choose a category</option>
                                <% cat.forEach(element => { %>
                                    <option value="<%= element.name %>" <%= product.category.name === element.name ? 'selected' : '' %>><%= element.name %></option>
                                <% }) %>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Product Images</label>
                            <div class="image-upload-container" id="dropZone">
                                <p>Drag & drop images here or click to select</p>
                                <input type="file" id="fileInput" name="images" multiple accept="image/*" style="display: none;">
                            </div>
                            <div class="image-preview-container" id="imagePreviewContainer">
                                <% product.productImage.forEach((image, index) => { %>
                                    <div class="image-preview">
                                        <img src="<%= image %>" alt="Product image <%= index + 1 %>">
                                        <button type="button" class="remove-image" data-index="<%= index %>">&times;</button>
                                    </div>
                                <% }) %>
                            </div>
                            <div id="images-error" class="error-message"></div>
                        </div>
                        <div>
                            <button class="btn btn-primary" type="submit">Update</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<div id="cropperContainer" class="cropper-container" style="display: none;">
    <div class="cropper-content">
        <img id="cropperImage" src="" alt="Image to crop" style="max-width: 100%; display: block;">
        <div class="mt-4">
            <button id="cropButton" class="btn btn-primary mr-2">Crop & Save</button>
            <button id="cancelCropButton" class="btn btn-secondary">Cancel</button>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<%- include('../partials/admin/footer') %>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('editProductForm');
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const imagePreviewContainer = document.getElementById('imagePreviewContainer');
        const cropperContainer = document.getElementById('cropperContainer');
        const cropperImage = document.getElementById('cropperImage');
        const cropButton = document.getElementById('cropButton');
        const cancelCropButton = document.getElementById('cancelCropButton');
        let cropper;
        let currentFileIndex;
        const maxImages = 6;
        const croppedImages = [];

        // Drag and drop functionality
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, unhighlight, false);
        });

        function highlight() {
            dropZone.classList.add('border-blue-500');
        }

        function unhighlight() {
            dropZone.classList.remove('border-blue-500');
        }

        dropZone.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFiles(files);
        }

        dropZone.addEventListener('click', () => fileInput.click());

        fileInput.addEventListener('change', (e) => {
            handleFiles(e.target.files);
        });

        function handleFiles(files) {
            if (croppedImages.length + files.length > maxImages) {
                alert(`You can only upload a maximum of ${maxImages} images.`);
                return;
            }
            [...files].forEach((file, index) => {
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        showCropper(e.target.result, croppedImages.length + index);
                    };
                    reader.readAsDataURL(file);
                }
            });
        }

        function showCropper(imageSrc, index) {
            cropperImage.src = imageSrc;
            cropperContainer.style.display = 'flex';
            currentFileIndex = index;
            if (cropper) {
                cropper.destroy();
            }
            cropper = new Cropper(cropperImage, {
                aspectRatio: 1,
                viewMode: 1,
                minCropBoxWidth: 400,
                minCropBoxHeight: 400,
                ready: function() {
                    this.cropper.setCropBoxData({
                        width: Math.min(this.cropper.getContainerData().width, 500),
                        height: Math.min(this.cropper.getContainerData().height, 500)
                    });
                }
            });
        }

         
        
cropButton.addEventListener('click', () => {
    const croppedImageData = cropper.getCroppedCanvas().toDataURL();

    // If replacing an existing image, update its index
    if (currentFileIndex !== null) {
        croppedImages[currentFileIndex] = croppedImageData;
    } else {
        // Otherwise, add as a new image
        croppedImages.push(croppedImageData);
    }

    updateImagePreviews();
    closeCropper();
});

cancelCropButton.addEventListener('click', closeCropper);

function closeCropper() {
    cropperContainer.style.display = 'none';
    cropper.destroy();
    cropper = null;
    currentFileIndex = null; // Reset the index
}

function updateImagePreviews() {
    imagePreviewContainer.innerHTML = '';
    croppedImages.forEach((imageSrc, index) => {
        const previewElement = document.createElement('div');
        previewElement.className = 'image-preview';
        previewElement.innerHTML = `
            <img src="${imageSrc}" alt="Product image ${index + 1}">
            <button type="button" class="remove-image" data-index="${index}">&times;</button>
        `;
        imagePreviewContainer.appendChild(previewElement);

        // Add event listener for remove button
        previewElement.querySelector('.remove-image').addEventListener('click', () => {
            removeImage(index);
        });
    });
}

function removeImage(index) {
    croppedImages.splice(index, 1); // Remove the image from the array
    updateImagePreviews(); // Re-render the previews
}
form.addEventListener('submit', (e) => {
    e.preventDefault();
    if (validateForm()) {
        const formData = new FormData(form);
        const uploadPromises = croppedImages.map((imageSrc, index) =>
            fetch(imageSrc)
                .then(res => res.blob())
                .then(blob => {
                    formData.append('images', blob, `image${index + 1}.png`);
                })
        );
        // Make sure to await the image uploads before submitting the form data
        Promise.all(uploadPromises).then(() => {
            fetch(form.action, {
                method: 'POST',
                body: formData
            }).then(response => {
                if (response.ok) {
                    // SweetAlert success popup
                    Swal.fire({
                        icon: 'success',
                        title: 'Product Updated!',
                        text: 'Your product has been successfully updated.',
                        confirmButtonText: 'Okay'
                    }).then(() => {
                        window.location.href = '/admin/products'; // Redirect after successful submission
                    });
                } else {
                    // SweetAlert error popup
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error updating product. Please try again.',
                        confirmButtonText: 'Try Again'
                    });
                }
            }).catch(error => {
                console.error('Error submitting form:', error);
                // SweetAlert error popup for fetch errors
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error submitting form. Please try again.',
                    confirmButtonText: 'Okay'
                });
            });
        });
    }
});

        function validateForm() {
            let isValid = true;
            const errorElements = document.querySelectorAll('.error-message');
            errorElements.forEach(el => el.textContent = '');

            const productName = document.getElementById('product_name').value.trim();
            if (!productName) {
                document.getElementById('productName-error').textContent = 'Product name is required.';
                isValid = false;
            }

            const brand = document.querySelector('select[name="brand"]').value;
            if (!brand) {
                document.getElementById('brand-error').textContent = 'Please select a brand.';
                isValid = false;
            }

            const description = document.getElementById('descriptionid').value.trim();
            if (!description) {
                document.getElementById('description-error').textContent = 'Description is required.';
                isValid = false;
            }

            const regularPrice = document.querySelector('input[name="regularPrice"]').value;
            if (!regularPrice || isNaN(regularPrice) || Number(regularPrice) <= 0) {
                document.getElementById('regularPrice-error').textContent = 'Enter a valid price.';
                isValid = false;
            }

            const salePrice = document.querySelector('input[name="salePrice"]').value;
            if (!salePrice || (isNaN(salePrice) || Number(salePrice) < 0)) {
                document.getElementById('salePrice-error').textContent = 'Enter a valid sale price.';
                isValid = false;
            }

            const quantity = document.querySelector('input[name="quantity"]').value;
            if (!quantity || isNaN(quantity) || Number(quantity) <= 0) {
                document.getElementById('quantity-error').textContent = 'Enter a valid quantity.';
                isValid = false;
            }

            const category = document.querySelector('select[name="category"]').value;
            if (!category) {
                document.getElementById('category-error').textContent = 'Please select a category.';
                isValid = false;
            }

            if (croppedImages.length < 1 && product.productImage.length < 1) {
                document.getElementById('images-error').textContent = 'Please upload at least one image.';
                isValid = false;
            }

            return isValid;
        }
    });

    window.addEventListener('resize', function () {
        if (cropper) {
            const containerData = cropper.getContainerData();
            cropper.setCropBoxData({
                width: Math.min(containerData.width, 300),
                height: Math.min(containerData.height, 300),
            });
        }
    });

    function deleteSingleImage(imageId, productId) {
            $.ajax({
                url: "/admin/deleteImage",
                method: "post",
                data: { imageNameToServer: imageId, productIdToServer: productId },
                success: ((response) => {
                    if (response.status === true) {
                        window.location.reload()
                    }
                })
            })
        }
</script>