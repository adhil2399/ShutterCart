<%- include('../partials/admin/header') %>

        <section class="content-main">
            <div class="content-header">
                <div>
                    <h1 class="content-title card-title">Dashboard </h1>
                </div>
                <div>
                    <select id="timeFilter" class="form-select me-2 d-inline-block" style="width: 150px;">
                        <option value="yearly" <%= timeFrame === 'yearly' ? 'selected' : '' %>>Yearly</option>
                        <option value="monthly" <%= timeFrame === 'monthly' ? 'selected' : '' %>>Monthly</option>
                        <option value="weekly" <%= timeFrame === 'weekly' ? 'selected' : '' %>>Weekly</option>
                        <option value="daily" <%= timeFrame === 'daily' ? 'selected' : '' %>>Daily</option>
                    </select>
                    <a href="/admin/salesReport" class="btn btn-brand">
                        <i class="fas fa-chart-line me-2"></i>
                        Sales Report
                    </a>
                </div>
            </div>

            <!-- Stats -->
            <div class="row">
                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-primary-light"><i class="text-primary material-icons md-monetization_on"></i></span>
                            <div class="text">
                                <h6 class="mb-1">Total Sales</h6>
                                <span id="totalSales">â‚¹<%= totalSales %></span>
                            </div>
                        </article>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-success-light"><i class="text-success material-icons md-shopping_bag"></i></span>
                            <div class="text">
                                <h6 class="mb-1">Total Orders</h6>
                                <span id="totalOrders"><%= totalOrders %></span>
                            </div>
                        </article>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-warning-light"><i class="text-warning material-icons md-person"></i></span>
                            <div class="text">
                                <h6 class="mb-1">Total Users</h6>
                                <span id="totalUsers"><%= totalUsers %></span>
                            </div>
                        </article>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-info-light"><i class="text-info material-icons md-shopping_basket"></i></span>
                            <div class="text">
                                <h6 class="mb-1">Total Products</h6>
                                <span id="totalProducts"><%= totalProducts %></span>
                            </div>
                        </article>
                    </div>
                </div>
            </div>

            <!-- Charts -->
            <div class="row">
                <div class="col-xl-8 col-lg-12">
                    <div class="card mb-4">
                        <article class="card-body">
                            <h5 class="card-title">Sale Statistics</h5>
                            <div style="height: 400px; position: relative;">
                                <canvas id="salesTrend"></canvas>
                            </div>
                        </article>
                    </div>
                </div>
                <div class="col-xl-4 col-lg-12">
                    <div class="card mb-4">
                        <article class="card-body">
                            <h5 class="card-title">Category Distribution</h5>
                            <div style="height: 400px; position: relative;">
                                <canvas id="categoryPie"></canvas>
                            </div>
                        </article>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-xl-6">
                    <div class="card mb-4">
                        <article class="card-body">
                            <h5 class="card-title">Top 10 Products</h5>
                            <div style="height: 400px; position: relative;">
                                <canvas id="topProducts"></canvas>
                            </div>
                        </article>
                    </div>
                </div>
                <div class="col-xl-6">
                    <div class="card mb-4">
                        <article class="card-body">
                            <h5 class="card-title">Top 10 Brands</h5>
                            <div style="height: 400px; position: relative;">
                                <canvas id="topBrands"></canvas>
                            </div>
                        </article>
                    </div>
                </div>
            </div>
        </section>

        <!-- Chart.js -->
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                let salesChart, categoryChart, productsChart;

                // Define fixed colors array
                const chartColors = [
                    '#f43f5e', // Red
                    '#f59e0b', // Orange
                    '#10b981', // Green
                    '#3b82f6', // Blue
                    '#8b5cf6'  // Purple
                ];

                // Format currency
                const formatCurrency = (value) => {
                    return new Intl.NumberFormat('en-IN', {
                        style: 'currency',
                        currency: 'INR',
                        maximumFractionDigits: 0
                    }).format(value);
                };

                // Format date based on timeFrame
                const formatDate = (dateStr, timeFrame) => {
                    if (!dateStr) return '';
                    
                    const date = new Date(dateStr);
                    
                    if (isNaN(date.getTime())) {
                        console.error('Invalid date:', dateStr);
                        return dateStr;
                    }
                    
                    switch(timeFrame) {
                        case 'yearly':
                            return date.getFullYear().toString();
                        case 'monthly':
                            return date.toLocaleString('en-US', { 
                                month: 'short',
                                year: 'numeric'
                            });
                        case 'weekly':
                            return `Week ${date.getWeek()}, ${date.getFullYear()}`;
                        default: // daily
                            return date.toLocaleString('en-US', { 
                                month: 'short',
                                day: 'numeric'
                            });
                    }
                };

                // Add week number calculation
                Date.prototype.getWeek = function() {
                    const d = new Date(Date.UTC(this.getFullYear(), this.getMonth(), this.getDate()));
                    const dayNum = d.getUTCDay() || 7;
                    d.setUTCDate(d.getUTCDate() + 4 - dayNum);
                    const yearStart = new Date(Date.UTC(d.getUTCFullYear(),0,1));
                    return Math.ceil((((d - yearStart) / 86400000) + 1)/7);
                };

                // Initialize Charts
                function initializeCharts(data, timeFrame) {
                    // Sort category data alphabetically
                    const sortedCategoryData = [...data.categoryData].sort((a, b) => 
                        a.name.localeCompare(b.name)
                    );

                    // Create a map to store fixed colors for categories
                    const categoryColorMap = new Map();
                    sortedCategoryData.forEach((category, index) => {
                        categoryColorMap.set(category.name, chartColors[index % chartColors.length]);
                    });

                    // Destroy existing charts if they exist
                    if (salesChart) salesChart.destroy();
                    if (categoryChart) categoryChart.destroy();
                    if (productsChart) productsChart.destroy();

                    // Update stats
                    document.getElementById('totalSales').textContent = formatCurrency(data.totalSales);
                    document.getElementById('totalOrders').textContent = data.totalOrders;
                    document.getElementById('totalUsers').textContent = data.totalUsers;
                    document.getElementById('totalProducts').textContent = data.totalProducts;

                    // Sales Trend Chart
                    const salesCtx = document.getElementById('salesTrend').getContext('2d');
                    salesChart = new Chart(salesCtx, {
                        type: 'line',
                        data: {
                            labels: data.salesData.map(item => item.date),
                            datasets: [{
                                label: 'Sales',
                                data: data.salesData.map(item => item.amount),
                                borderColor: '#10b981',
                                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                borderWidth: 2,
                                tension: 0.4,
                                fill: true
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: false
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            return formatCurrency(context.raw);
                                        },
                                        title: function(tooltipItems) {
                                            return formatDate(tooltipItems[0].label, timeFrame);
                                        }
                                    }
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        callback: function(value) {
                                            return formatCurrency(value);
                                        }
                                    }
                                },
                                x: {
                                    ticks: {
                                        callback: function(value, index) {
                                            const label = this.getLabelForValue(value);
                                            return formatDate(label, timeFrame);
                                        },
                                        maxRotation: 45,
                                        minRotation: 45,
                                        autoSkip: true,
                                        maxTicksLimit: timeFrame === 'monthly' ? 12 : 10
                                    }
                                }
                            }
                        }
                    });

                    // Category Distribution Chart
                    const categoryCtx = document.getElementById('categoryPie').getContext('2d');
                    const categoryChartData = {
                        labels: sortedCategoryData.map(item => item.name),
                        datasets: [{
                            data: sortedCategoryData.map(item => item.count),
                            backgroundColor: sortedCategoryData.map(item => categoryColorMap.get(item.name))
                        }]
                    };

                    categoryChart = new Chart(categoryCtx, {
                        type: 'pie',
                        data: categoryChartData,
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'right',
                                    labels: {
                                        padding: 20,
                                        usePointStyle: true,
                                        pointStyle: 'circle'
                                    }
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            const label = context.label || '';
                                            const value = context.raw || 0;
                                            const total = context.dataset.data.reduce((acc, val) => acc + val, 0);
                                            const percentage = ((value / total) * 100).toFixed(1);
                                            return `${label}: ${value} (${percentage}%)`;
                                        }
                                    }
                                }
                            }
                        }
                    });

                    // Top Products Chart
                    const productsCtx = document.getElementById('topProducts').getContext('2d');
                    productsChart = new Chart(productsCtx, {
                        type: 'bar',
                        data: {
                            labels: data.topProducts.map(item => item.name),
                            datasets: [{
                                label: 'Units Sold',
                                data: data.topProducts.map(item => item.sales),
                                backgroundColor: '#10b981',
                                borderRadius: 4
                            }]
                        },
                        options: {
                            indexAxis: 'y',
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: false
                                }
                            },
                            scales: {
                                x: {
                                    beginAtZero: true,
                                    grid: {
                                        display: false
                                    }
                                },
                                y: {
                                    grid: {
                                        display: false
                                    }
                                }
                            }
                        }
                    });
                }

                // Function to fetch dashboard data
                async function fetchDashboardData(timeFrame) {
                    try {
                        const response = await fetch(`/admin/api/dashboard-data?timeFrame=${timeFrame}`);
                        if (!response.ok) throw new Error('Failed to fetch dashboard data');
                        const data = await response.json();
                        initializeCharts(data, timeFrame);
                    } catch (error) {
                        console.error('Error fetching dashboard data:', error);
                    }
                }

                // Initialize charts with initial data
                initializeCharts({
                    totalSales: <%= totalSales %>,
                    totalOrders: <%= totalOrders %>,
                    totalUsers: <%= totalUsers %>,
                    totalProducts: <%= totalProducts %>,
                    salesData: <%- JSON.stringify(salesData) %>,
                    categoryData: <%- JSON.stringify(categoryData) %>,
                    topProducts: <%- JSON.stringify(topProducts) %>
                }, '<%= timeFrame %>');

                // Time Filter Change Handler
                document.getElementById('timeFilter').addEventListener('change', function() {
                    const timeFrame = this.value;
                    fetchDashboardData(timeFrame);
                    // Update URL without refreshing
                    window.history.pushState({}, '', `/admin?timeFrame=${timeFrame}`);
                });
            });
        </script>

<%- include('../partials/admin/footer') %>