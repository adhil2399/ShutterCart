<%- include('../partials/user/header') %>
<style>

  .modal-content {
    border-radius: 10px;
    border: solid black 3PX;
    border: none;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  }

  .sidebar-title {
    position: relative;
    margin-bottom: 15px;
  }

  .loader-line {
    width: 40px;
    height: 3px;
    background: #ff5c3e;
    margin-bottom: 8px;
  }

  .form-control {
    border-radius: 8px;
    padding: 10px 10px;
    border: 1px solid #e2e2e2;
    transition: all 0.3s ease;
  }

  .form-control:focus {
    border-color: #ff5c3e;
    box-shadow: 0 0 0 0.2rem rgba(255, 92, 62, .25);
  }

  .custom-radio {
    width: 18px;
    height: 18px;
    border: 2px solid #ff5c3e;
    margin-right: 8px;
  }

  .custom-radio:checked {
    background-color: #ff5c3e;
    border-color: #ff5c3e;
  }

  .btn_outline {
    border: 1px solid #e2e2e2;
    color: #333;
    padding: 8px 20px;
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .btn_outline:hover {
    background: #f8f8f8;
  }

  .add-address {
    background: #ff5c3e;
    color: white;
    padding: 8px 20px;
    border-radius: 8px;
    border: none;
    transition: all 0.3s ease;
  }

  .add-address:hover {
    background: #ff4424;
    color: white;
  }

  .form-label {
    font-weight: 500;
    color: #333;
    margin-bottom: 8px;
  }

  .modal-dialog {
    max-width: 600px;
  }

  .btn-close {
    opacity: 1;
    background: none;
    position: relative;
  }

  .btn-close::before,
  .btn-close::after {
    content: '';
    position: absolute;
    width: 2px;
    height: 16px;
    background: #333;
    top: 50%;
    left: 50%;
  }

  .btn-close::before {
    transform: translate(-50%, -50%) rotate(45deg);
  }

  .btn-close::after {
    transform: translate(-50%, -50%) rotate(-45deg);
  }



     /* user profile */

        .profile-card {
            background: #f8f9fa;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 2rem;
            max-width: 600px;
            margin: 2rem auto;
            transition: all 0.3s ease;
        }

        .profile-card:hover {
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .form-control {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 0.75rem;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            border-color: #000;
            box-shadow: 0 0 0 0.2rem rgba(0, 0, 0, 0.1);
        }

        .btn-save {
            background-color: #000;
            color: #fff;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-save:hover {
            background-color: #333;
            transform: translateY(-1px);
        }

        .btn-cancel {
            background-color: transparent;
            color: #000;
            border: 1px solid #000;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-cancel:hover {
            background-color: #f8f9fa;
         }

        .section-title {
            font-size: 1.1rem;
            color: #000;
            margin-bottom: 1.5rem;
            font-weight: 500;
        }

        .form-label {
            color: #495057;
            font-weight: 500;
        }

        .invalid-feedback {
            color: #ce3434;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
  
 /* wallet css */
    
        .wallet-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .wallet-card {
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
        }
        .wallet-card h2 {
            font-size: 18px;
            margin-top: 0;
        }
        .wallet-amount {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
        }
        .wallet-description {
            font-size: 14px;
            color: #666;
        }
        .add-money-btn {
            display: block;
            width: 100%;
            padding: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
        }
        .transaction-history {
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
        }
        .transaction-list {
            list-style-type: none;
            padding: 0;
        }
        .transaction-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #eee;
        }
        .transaction-item:last-child {
            border-bottom: none;
        }
        .transaction-icon {
            font-size: 24px;
            margin-right: 15px;
        }
        .transaction-details {
            flex-grow: 1;
        }
        .transaction-amount {
            font-weight: bold;
        }
        .transaction-status {
            font-size: 12px;
            padding: 3px 8px;
            border-radius: 12px;
            background-color: #e0e0e0;
        }
        .status-completed {
            background-color: #28a745;
            color: white;
        }
        .status-pending {
            background-color: #ffc107;
            color: black;
        }


        /* order css */

        .modal-container {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
}

.modal-container:target {
    display: flex;
    justify-content: center;
    align-items: center;
}

.modal-content {
    background: #1a1a1a;
    color: #fff;
    padding: 20px;
    border-radius: 8px;
    max-width: 800px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
}

.modal-close {
    position: absolute;
    right: 20px;
    top: 20px;
    text-decoration: none;
    color: #fff;
    font-size: 24px;
    background: none;
    border: none;
    opacity: 0.8;
}

.modal-close:hover {
    color: #fff;
    opacity: 1;
}

.order-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 1rem;
    background-color: #1a1a1a;
    color: #fff;
    border-radius: 8px;
    overflow: hidden;
}

.order-table th, 
.order-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #333;
}

.order-table th {
    background-color: #000;
    color: #fff;
    font-weight: 600;
}

.order-table tbody tr:hover {
    background-color: #2a2a2a;
}

.order-table tbody tr td {
    color: #e0e0e0;
}

.badge {
    padding: 5px 10px;
    border-radius: 4px;
    font-size: 12px;
    color: white;
    display: inline-block;
}

.badge-success { background-color: #2ecc71; }
.badge-danger { background-color: #e74c3c; }
.badge-primary { background-color: #3498db; }
.badge-warning { background-color: #f1c40f; }

.btn {
    padding: 5px 10px;
    border-radius: 4px;
    text-decoration: none;
    font-size: 14px;
    display: inline-block;
    margin: 0 2px;
    border: none;
    cursor: pointer;
}

.btn-info {
    background-color: #3498db;
    color: white;
}

.btn-danger {
    background-color: #e74c3c;
    color: white;
}

.btn-warning {
    background-color: #f1c40f;
    color: white;
}

.btn:hover {
    opacity: 0.9;
}

.address-box {
    background-color: #2a2a2a;
    padding: 15px;
    border-radius: 4px;
    margin: 10px 0;
    color: #e0e0e0;
}

.payment-box {
    background-color: #2a2a2a;
    padding: 15px;
    border-radius: 4px;
    color: #e0e0e0;
}

.address-box h4,
.payment-box h4 {
    color: #fff;
    margin-bottom: 15px;
}

.address-box p,
.payment-box p {
    margin-bottom: 5px;
    line-height: 1.5;
}

.table-container {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
    overflow-x: auto;
}

.main-content {
    min-height: calc(100vh - 200px); /* Adjust based on your footer height */
    padding-bottom: 60px; /* Add some space before footer */
}

.modal-content .order-table {
    background-color: #2a2a2a;
    margin-top: 15px;
}

.modal-content .order-table th {
    background-color: #000;
    color: #fff;
    border-bottom: 1px solid #333;
}

.modal-content .order-table td {
    border-bottom: 1px solid #333;
    color: #e0e0e0;
}

.modal-content h3 {
    color: #fff;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #333;
}

.swal2-popup {
    background: #1a1a1a !important;
    color: #fff !important;
}

.swal2-title, .swal2-html-container {
    color: #fff !important;
}

.swal2-confirm {
    background-color: #e74c3c !important;
}

.swal2-cancel {
    background-color: #95a5a6 !important;
}

.order-details-container {
  padding: 20px;
}

.order-summary {
  margin-bottom: 25px;
  padding: 15px;
  background: #f8f9fa;
  border-radius: 8px;
}

.summary-item {
  display: flex;
  justify-content: space-between;
  margin-bottom: 10px;
}

.summary-item .label {
  font-weight: 500;
  color: #666;
}

.price-details {
  border: 1px solid #e0e0e0;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 25px;
}

.price-details h4 {
  margin-bottom: 15px;
  padding-bottom: 10px;
  border-bottom: 1px solid #e0e0e0;
}

.price-item {
  display: flex;
  justify-content: space-between;
  margin-bottom: 10px;
}

.price-item.discount {
  color: #28a745;
}

.price-item.coupon {
  color: #007bff;
}

.price-item.final {
  font-weight: bold;
  border-top: 1px dashed #e0e0e0;
  padding-top: 10px;
  margin-top: 10px;
}

.order-items {
  margin-bottom: 25px;
}

.order-item {
  display: flex;
  gap: 15px;
  padding: 15px;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  margin-bottom: 15px;
}

.item-image img {
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 4px;
}

.item-details h5 {
  margin: 0 0 10px 0;
}

.item-details p {
  margin: 5px 0;
  color: #666;
}

.shipping-address {
  background: #f8f9fa;
  padding: 15px;
  border-radius: 8px;
}

.shipping-address h4 {
  margin-bottom: 15px;
}

.shipping-address p {
  margin: 5px 0;
}

.status-pending {
  color: #ffc107;
}

.status-confirmed {
  color: #17a2b8;
}

.status-shipped {
  color: #007bff;
}

.status-delivered {
  color: #28a745;
}

.status-cancelled {
  color: #dc3545;
}
</style>

  </head>
  <section class="section-b-space pt-0">
    <div class="heading-banner">
      <div class="custom-container container">
        <div class="row align-items-center">
          <div class="col-sm-6">
            <h4>Dashboard</h4>
          </div>
          <div class="col-sm-6">
            <ul class="breadcrumb float-end">
              <li class="breadcrumb-item"> <a class="text-decoration-none text-black" href="/">Home </a></li>
              <li class="breadcrumb-item active"> <a class="text-decoration-none text-black" href="#">Dashboard</a></li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </section>
  <section class="section-b-space pt-0">
    <div class="custom-container container user-dashboard-section">
      <div class="row">
        <div class="col-xl-3 col-lg-4">
          <div class="left-dashboard-show">
            <button class="btn btn_black sm rounded bg-primary">Show Menu</button>
          </div>
          <div class="dashboard-left-sidebar sticky">
            <div class="profile-box">
              <div class="profile-bg-img"></div>
              <div class="dashboard-left-sidebar-close"><i class="fa-solid fa-xmark"></i></div>
              <div class="profile-contain">
                <div class="profile-image"> <img class="img-fluid" src="../assets/images/user/12.jpg" alt=""></div>
                <div class="profile-name">
                  <h4>
                    <%= user.name %>
                  </h4>
                  <h6>
                    <%= user.email %>
                  </h6>
                  <!-- <span data-bs-toggle="modal" data-bs-target="#edit-box" title="Quick View" tabindex="0">Edit
                    Profile</span> -->
                </div>
              </div>
            </div>
            <ul class="nav flex-column nav-pills dashboard-tab" id="v-pills-tab" role="tablist"
              aria-orientation="vertical">
              <li>
                <button class="nav-link active" id="dashboard-tab" data-bs-toggle="pill" data-bs-target="#dashboard"
                  role="tab" aria-controls="dashboard" aria-selected="true"><i class="iconsax" data-icon="home-1"></i>
                   User Profile</button>
              </li>
          
              <li>
                <button class="nav-link" id="address-tab" data-bs-toggle="pill" data-bs-target="#address" role="tab"
                  aria-controls="address" aria-selected="false"><i class="iconsax"
                    data-icon="cue-cards"></i>Address</button>
              </li>
              
              <li>
                <button class="nav-link" id="Wallet-tab" data-bs-toggle="pill" data-bs-target="#wallet" role="tab"
                    aria-controls="wallet" aria-selected="false">
                    <i class="iconsax" data-icon="lamp-2"></i>Wallet
                </button>
            </li>
              <li>
                <button class="nav-link" id="order-tab" data-bs-toggle="pill" data-bs-target="#order" role="tab"
                  aria-controls="order" aria-selected="false"><i class="iconsax" data-icon="receipt-square"></i>
                  Order</button>
              </li>
             

              <li>
                <button class="nav-link" id="wishlist-tab" data-bs-toggle="pill" data-bs-target="#wishlist" role="tab"
                  aria-controls="wishlist" aria-selected="false"> <i class="iconsax" data-icon="heart"></i>Wishlist
                </button>
              </li>
             

              <li>
                <!-- <button class="nav-link" id="saved-card-tab" data-bs-toggle="pill" data-bs-target="#saved-card" role="tab" aria-controls="saved-card" aria-selected="false"> <i class="iconsax" data-icon="bank-card"></i>Saved Card</button> -->
              </li>
              <li>
                <!-- <button class="nav-link" id="privacy-tab" data-bs-toggle="pill" data-bs-target="#privacy" role="tab" aria-controls="privacy" aria-selected="false"> <i class="iconsax" data-icon="security-user"></i>Privacy</button> -->
              </li>
            </ul>
            <div class="logout-button"> <a class="btn btn_black sm" data-bs-toggle="modal"
                data-bs-target="#Confirmation-modal" title="Quick View" tabindex="0"><i class="iconsax me-1"
                  data-icon="logout-1"></i> Logout </a></div>
          </div>
        </div>
        <div class="col-xl-9 col-lg-8">
          <div class="tab-content" id="v-pills-tabContent">
            <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
              <div class="container">
                <div class="profile-card">
                    <h3 class="mb-4">Edit Your Profile</h3>
                    
                    <form id="profileForm"  class="needs-validation" novalidate>
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <label for="name" class="form-label">Name</label>
                                <input type="text" class="form-control" name="name" id="name" value="<%= user.name %>" required
                                       pattern="[A-Za-z ]{2,50}"
                                       title="Name should only contain letters and spaces">
                                <div class="invalid-feedback">
                                    Please enter a valid name (2-50 characters, letters only)
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label for="phone" class="form-label">Phone Number</label>
                                <input type="tel" class="form-control" name="phone" id="phone" value="<%= user.phone %>"required
                                       pattern="[0-9]{10}"
                                       title="Please enter a valid 10-digit phone number">
                                <div class="invalid-feedback">
                                    Please enter a valid 10-digit phone number
                                </div>
                            </div>
                        </div>
                      
        
                        <div class="section-title">Password Changes</div>
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">Current Password</label>
                            <input type="password" class="form-control" name="currentPassword" id="currentPassword"  required
                                   minlength="6">
                            <div class="invalid-feedback">
                                Please enter your current password (minimum 6 characters)
                            </div>
                        </div>
        
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">New Password</label>
                            <input type="password" class="form-control" name="newPassword" id="newPassword"  required
                             pattern=".{6,}"
                             title="Password must be at least 6 characters long and contain at least one letter and one number">
                            <div class="invalid-feedback">
                                Password must be at least 6 characters long  
                            </div>
                        </div>
        
                        <div class="mb-4">
                            <label for="confirmPassword" class="form-label">Confirm New Password</label>
                            <input type="password" class="form-control" id="confirmPassword" required >
                            <div class="invalid-feedback">
                                Passwords do not match
                            </div>
                        </div>
        
                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-cancel">Cancel</button>
                            <button type="submit" class="btn btn-save">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        
            <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
            <script>
               document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('profileForm');
    const newPassword = document.getElementById('newPassword');
    const confirmPassword = document.getElementById('confirmPassword');
    const currentPassword = document.getElementById('currentPassword')


    currentPassword.addEventListener('input',function () {
      if(this.value.trim===''){
        this.setCustomValidity('current password is empty')
      }else{
        this.setCustomValidity('')
      }
    })
    // Custom password match validation
    confirmPassword.addEventListener('input', function () {
        if (this.value.trim() !== newPassword.value.trim()) {
            this.setCustomValidity('Passwords do not match');
        } else {
            this.setCustomValidity('');
        }
    });

    form.addEventListener('submit', async function (event) {
        event.preventDefault();

         const formData = new FormData(form);
        const data = Object.fromEntries(formData);

         if (!form.checkValidity()) {
            event.stopPropagation();
            form.classList.add('was-validated');
        } else {
            try {
                 const response = await fetch('/edit-profile', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });

                const result = await response.json();

                if (result.success) {
        Toastify({
            text: '<i class="fas fa-check-circle"></i> ' + (result.message || "Your profile has been updated successfully."),
            duration: 3000,
            gravity: "top", 
            position: 'center',
            backgroundColor: "#4CAF50", // Green color for success
            className: "info",
            escapeMarkup: false, // Allow HTML content
        }).showToast();

        form.reset();
        form.classList.remove('was-validated');
    } else {
        Toastify({
            text: '<i class="fas fa-exclamation-circle"></i> ' + (result.message || "An error occurred while updating your profile."),
            duration: 3000,
            gravity: "top",
            position: 'center', 
            backgroundColor: "#FF4424",  // Red color for error
            className: "error",
            style: {
                color: "#FFFFFF", // White text color
                fontWeight: "bold", // Bold text
            },
            offset: {
                x: 10, // 10px from the left/right
                y: 45  // 20px from the top/bottom
            },
            escapeMarkup: false, // Allow HTML content
        }).showToast();
    }
} catch (error) {
    console.log(error);

    Toastify({
        text: '<i class="fas fa-exclamation-circle"></i> Network error occurred, please try again later.',
        duration: 3000,
        gravity: "top",
        position: 'center',
        backgroundColor: "#FF4424", // Red color for error
        className: "error",
        style: {
            color: "#FFFFFF", // White text color
            fontWeight: "bold", // Bold text
        },
        offset: {
            x: 10, // 10px from the left/right
            y: 20  // 20px from the top/bottom
        },
        escapeMarkup: false, // Allow HTML content
    }).showToast();
            }
        }
    });

    // Reset validation and form on cancel
    document.getElementById('cancelBtn').addEventListener('click', function () {
        form.reset();
        form.classList.remove('was-validated');
    });
});

            </script>

            </div>
            
            <div class="tab-pane fade" id="wishlist" role="tabpanel" aria-labelledby="wishlist-tab">
              <div class="dashboard-right-box">
                <div class="wishlist-box ratio1_3">
                  <div class="sidebar-title">
                    <div class="loader-line"></div>
                    <h4>Wishlist</h4>
                  </div>
                  <div class="row row-cols-md-3 row-cols-2 grid-section view-option row gy-4 g-xl-4">
                    <% if (wishlist && wishlist.products && wishlist.products.length > 0) { %>
                      <% wishlist.products.forEach((item) => { %>
                        <div class="col products" data-product-id="<%= item.productId._id %>">
                          <div class="product-box-3 product-wishlist" >
                            <div class="img-wrapper">
                              <div class="label-block">
                                <a class="label-2 wishlist-icon delete-button"
                                  href="javascript:void(0)"
                                  onclick="removeFromWishlist('<%= item.productId._id %>')"
                                  title="Remove from Wishlist">
                                  <i class="iconsax" data-icon="trash" aria-hidden="true"></i>
                                </a>
                              </div>
                              <div class="product-image">
                                <a class="pro-first" href="/productDetails?id=<%= item.productId._id %>">
                                  <img class="bg-img" src="<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName %>">
                                </a>
                                <a class="pro-sec" href="/productDetails?id=<%= item.productId._id %>">
                                  <img class="bg-img" src="<%= item.productId.productImage[1] %>" alt="<%= item.productId.productName %>">
                                </a>
                              </div>
                            </div>
                            <div class="product-detail">
                              <a href="/product/<%= item.productId._id %>">
                                <h6><%= item.productId.productName %></h6>
                              </a>
                              <p>
                                $<%= item.productId.salePrice %>
                                <del>$<%= item.productId.regularPrice %></del>
                              </p>
                            </div>
                            <a class="btn btn-dark" onclick="addToCart('<%=item.productId._id%>')">Add To Cart</a>
                          </div>
                        </div>
                      <% }); %>
                    <% } else { %>
                      <div class="col-12">
                        <p class="text-center">Your wishlist is empty.</p>
                        <a href="/shop" class="btn btn-dark">Go to Shop</a>

                        </div>
                      <% } %>
                      </div>
                      
                    </div>
                    </div>
            </div>


            
<script> 
async function removeFromWishlist(productId) {
    try {
        // Show confirmation dialog using SweetAlert
        const result = await Swal.fire({
            title: 'Remove from Wishlist?',
            text: 'Are you sure you want to remove this item from your wishlist?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, remove it!',
            cancelButtonText: 'Cancel'
        });

        // If user confirms the deletion
        if (result.isConfirmed) {
            const response = await fetch(`/wishlist/remove/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (response.ok) {
                // Show success message
                Swal.fire({
                    title: 'Removed!',
                    text: 'Product has been removed from your wishlist.',
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                });

                // Remove the product from the DOM
                const productElement = document.querySelector(`.products[data-product-id="${productId}"]`);
                if (productElement) {
                    // Add a fade-out effect
                    productElement.style.transition = 'opacity 0.3s ease';
                    productElement.style.opacity = '0';

                    // After fade-out, remove the element from the DOM
                    setTimeout(() => {
                        productElement.remove();

                        // Check if there are any remaining products
                        const remainingProducts = document.querySelectorAll('.products');
                        if (remainingProducts.length === 0) {
                            // Show the "Your wishlist is empty" message and "Go to Shop" button
                            const wishlistContainer = document.querySelector('.grid-section');
                            wishlistContainer.innerHTML = `
                                <div class="col-12">
                                    <p class="text-center">Your wishlist is empty.</p>
                                    <a href="/shop" class="btn btn-dark">Go to Shop</a>
                                </div>
                            `;
                        }
                    }, 300);
                }
            } else {
                // Show error message
                Swal.fire({
                    title: 'Error!',
                    text: data.error || 'Failed to remove product from wishlist.',
                    icon: 'error',
                    confirmButtonColor: '#3085d6'
                });
            }
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: 'An error occurred. Please try again.',
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
    }
}

  </script>


<div class="tab-pane fade" id="order" role="tabpanel" aria-labelledby="order-tab">
  <div class="container mt-5">
    <div class="row">
      <div class="col-12 mt-5">
        <h2 class="mb-4">Order History</h2>

        <% if (locals.error) { %>
          <div class="alert alert-danger"><%= error %></div>
        <% } %>

        <% if (orders && orders.length > 0) { %>
          <div class="table-container">
            <table class="order-table">
              <thead>
                <tr>
                  <th>Order ID</th>
                  <th>Date</th>
                  <th>Items</th>
                  <th>Total</th>
                  <th>Status</th>
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
                <% orders.forEach(order => { %>
                  <tr>
                    <td><%= order.orderId %></td>
                    <td><%= new Date(order.updatedAt).toLocaleDateString() %></td>
                    <td><%= order.orderedItems ? order.orderedItems.length : 0 %> items</td>
                    <td>₹<%= order.finalAmount ? order.finalAmount.toFixed(2) : '0.00' %></td>
                    <td>
                      <span class="badge badge-<%= 
                        order.status === 'Delivered' ? 'success' : 
                        order.status === 'Cancelled' ? 'danger' : 
                        order.status === 'Returned' ? 'warning' : 'primary' 
                      %>">
                        <%= order.status %>
                      </span>
                      <% if (order.returnStatus) { %>
                        <br>
                        <small class="badge badge-<%= 
                          order.returnStatus === 'approved' ? 'success' : 
                          order.returnStatus === 'rejected' ? 'danger' : 'warning' 
                        %>">
                          Return <%= order.returnStatus.charAt(0).toUpperCase() + order.returnStatus.slice(1) %>
                        </small>
                      <% } %>
                    </td>
                    <td>
                      <a href="#modal-<%= order.orderId %>" class="btn btn-info">View Details</a>
                      <% if (order.status === 'Delivered' && !order.returnStatus) { %>
                        <button class="btn btn-sm btn-warning return-order" data-order-id="<%= order.orderId %>" data-bs-toggle="modal" data-bs-target="#returnModal<%= order.orderId %>">
                          <i class="fas fa-undo"></i> Return
                        </button>

                         <!-- Return Modal -->
           <div class="modal fade" id="returnModal<%= order.orderId %>" tabindex="-1" aria-labelledby="returnModalLabel<%= order.orderId %>" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="returnModalLabel<%= order.orderId %>">Return Order #<%= order.orderId %></h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="returnForm<%= order.orderId %>">
                            <div class="mb-3">
                                <label for="returnReason<%= order.orderId %>" class="form-label">Reason for Return</label>
                                <select class="form-select" id="returnReason<%= order.orderId %>" required>
                                    <option value="">Select a reason</option>
                                    <option value="Damaged Product">Damaged Product</option>
                                    <option value="Wrong Product">Wrong Product</option>
                                    <option value="Not as Described">Not as Described</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="returnDetails<%= order.orderId %>" class="form-label">Additional Details</label>
                                <textarea class="form-control" id="returnDetails<%= order.orderId %>" rows="3" required></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" onclick="returnOrder('<%= order.orderId %>')">Submit Return Request</button>
                    </div>
                </div>
            </div>
            </div>   

                      <% } else if (['Placed'].includes(order.status)) { %>
                        <button class="btn btn-danger" onclick="cancelOrder('<%= order.orderId %>')">
                          Cancel
                        </button>
                      <% } %>
                    </td>
                  </tr>
                <% }); %>
              </tbody>
            </table>
          </div>

          
          <!-- Order Detail Modals -->
          <% orders.forEach(order => { %>
            <div id="modal-<%= order.orderId %>" class="modal-container">
              <div class="modal-content">
                <a href="#" class="modal-close">&times;</a>
                <h3>Order Details of : <%= order.orderId %></h3>
                <div class="order-details-container">
                  <div class="order-summary">
                    <div class="summary-item">
                      <span class="label">Order Date:</span>
                      <span class="value"><%= new Date(order.createdAt).toLocaleDateString() %></span>
                    </div>
                    <div class="summary-item">
                      <span class="label">Payment Method:</span>
                      <span class="value"><%= order.paymentMethod %></span>
                    </div>
                    <div class="summary-item">
                      <span class="label">Payment Status:</span>
                      <span class="value"><%= order.paymentStatus %></span>
                    </div>
                    <div class="summary-item">
                      <span class="label">Order Status:</span>
                      <span class="value status-<%= order.orderStatus %>"><%= order.status %></span>
                    </div>
                  </div>
                  
                  <div class="price-details">
                    <h4>Price Details</h4>
                    <div class="price-item">
                      <span>Total MRP</span>
                      <span>₹<%= order.totalPrice.toFixed(2) %></span>
                    </div>
                    <% if (order.discount && (order.discount.bestOffer > 0 || order.discount.coupon > 0)) { %>
                      <% if (order.discount.bestOffer > 0) { %>
                        <div class="price-item discount">
                          <span>Best Offer Discount</span>
                          <span>-₹<%= order.discount.bestOffer.toFixed(2) %></span>
                        </div>
                      <% } %>
                      <% if (order.discount.coupon > 0) { %>
                        <div class="price-item discount">
                          <span>Coupon Discount</span>
                          <span>-₹<%= order.discount.coupon.toFixed(2) %></span>
                        </div>
                      <% } %>
                      <div class="price-item discount">
                        <span>Total Discount</span>
                        <span>-₹<%= order.discount.total.toFixed(2) %></span>
                      </div>
                    <% } %>
                    <div class="price-item final">
                      <span>Final Price</span>
                      <span>₹<%= order.finalAmount.toFixed(2) %></span>
                    </div>
                  </div>

                  <div class="order-items">
                    <h4>Ordered Items</h4>
                    <% order.orderedItems.forEach(item => { %>
                      <div class="order-item">
                        <div class="item-image">
                          <img src="<%= item.product.productImage[0] %>" alt="<%= item.productName %>">
                        </div>
                        <div class="item-details">
                          <h5><%= item.productName %></h5>
                          <p>Quantity: <%= item.quantity %></p>
                          <p>Price: ₹<%= item.product.salePrice %></p>
                        </div>
                      </div>
                    <% }) %>
                  </div>

                  <div class="shipping-address">
                    <h4>Shipping Address</h4>
                    <p><%= order.address.name %></p>
                    <p><%= order.address.addressType %></p>
                    <p><%= order.address.city %>, <%= order.address.state %> ,<%= order.address.landMark %></p>
                    <p><%= order.address.pinCode %></p>
                    <p>Phone: <%= order.address.phone %></p>
                  </div>
                </div>
              </div>
            </div>
          <% }); %>

          <!-- Pagination -->
          <% if (locals.totalPages > 1) { %>
            <div class="pagination" style="text-align: center; margin-top: 20px;">
              <% if (currentPage > 1) { %>
                <a href="/order-history?page=<%= currentPage - 1 %>" class="btn btn-info">Previous</a>
              <% } %>

              <% for (let i = 1; i <= totalPages; i++) { %>
                <a href="/order-history?page=<%= i %>" 
                   class="btn <%= currentPage == i ? 'btn-primary' : 'btn-info' %>">
                  <%= i %>
                </a>
              <% } %>

              <% if (currentPage < totalPages) { %>
                <a href="/order-history?page=<%= currentPage + 1 %>" class="btn btn-info">Next</a>
              <% } %>
            </div>
          <% } %>
        <% } else { %>
          <div style="text-align: center; padding: 50px 0;">
            <i class="fas fa-shopping-bag" style="font-size: 48px; margin-bottom: 20px;"></i>
            <h4>No orders yet</h4>
            <p style="color: #666;">Start shopping to see your orders here!</p>
            <a href="/shop" class="btn btn-info">Shop Now</a>
          </div>
        <% } %>
      </div>
    </div>
  </div>
</div>

<script>
  
  async function cancelOrder(orderId) {
    try {
        const result = await Swal.fire({
            title: 'Cancel Order',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it',
            background: '#1a1a1a',
            color: '#fff',
            confirmButtonColor: '#e74c3c',
            cancelButtonColor: '#95a5a6'
        });

        if (result.isConfirmed) {
            const response = await fetch(`/cancel-order/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (data.success) {
                await Swal.fire({
                    title: 'Cancelled!',
                    text: 'Your order has been cancelled.',
                    icon: 'success',
                    background: '#1a1a1a',
                    color: '#fff',
                    confirmButtonColor: '#3498db'
                });
                location.reload();
            } else {
                throw new Error(data.message || 'Failed to cancel order');
            }
        }
    } catch (error) {
        console.error('Error cancelling order:', error);
        await Swal.fire({
            title: 'Error!',
            text: error.message || 'Failed to cancel order',
            icon: 'error',
            background: '#1a1a1a',
            color: '#fff',
            confirmButtonColor: '#e74c3c'
        });
    }
}
  async function returnOrder(orderId) {
        const reasonSelect = document.querySelector(`#returnReason${orderId}`);
        const details = document.querySelector(`#returnDetails${orderId}`).value;
        
        if (!reasonSelect.value || !details) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please fill in all fields'
            });
            return;
        }

        try {
            const response = await fetch(`/order/return/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    reason: reasonSelect.value,
                    details: details
                })
            });

            const data = await response.json();

            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Return request submitted successfully'
                }).then(() => {
                    window.location.reload();
                });
            } else {

              Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || 'Failed to submit return request'
        });     
      
      }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to submit return request'
            });
        }
    }

 
</script>

            <!-- wallet  -->
            <div class="tab-pane fade" id="wallet" role="tabpanel" aria-labelledby="Wallet-tab">
              <div class="dashboard-right-box">
                <div class="wallet-section">
                  <!-- Current Balance -->
                  <div class="wallet-grid">
                    <div class="wallet-card">
                      <h2>Current Balance</h2>
                      <div class="wallet-amount">₹<%= wallet.totalBalance %></div>
                      <div class="wallet-description">Available for use</div>
                    </div>
            
                    <!-- Add Money -->
                    <div class="wallet-card">
                      <h2>Add Money</h2>
                      <input id="addMoneyInput" type="number" placeholder="Enter amount" class="form-control mb-2" required>
                      <button id="addMoneyButton" class="add-money-btn btn btn-primary">Add Funds</button>
                      <div id="addMoneyMessage" class="wallet-message mt-2"></div>
                    </div>
                  </div>
            
                  <!-- Transaction History -->
                  <div class="transaction-history mt-4">
                    <h2>Transaction History</h2>
                    <ul id="transactionList" class="transaction-list">
                      <% wallet.transactions.forEach(function(transaction) { %>
                        <li class="transaction-item">
                          <span class="transaction-icon"><%= transaction.type === 'Deposit' ? '↓' : '↑' %></span>
                          <div class="transaction-details">
                            <div><%= transaction.description || transaction.type %></div>
                            <small><%= new Date(transaction.date).toLocaleString() %></small>
                          </div>
                          <div class="transaction-amount" style="color: '<%= transaction.type === 'Deposit' ? 'green' : 'red' %>'">
                            <%= transaction.type === 'Deposit' ? '+' : '-' %>₹<%= transaction.amount.toFixed(2) %>
                          </div>
                          <span class="transaction-status status-<%= transaction.status.toLowerCase() %>"><%= transaction.status %></span>
                        </li>
                      <% }); %>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
            
         
<script>
  const addMoneyButton = document.getElementById('addMoneyButton');
  const addMoneyInput = document.getElementById('addMoneyInput');
  const addMoneyMessage = document.getElementById('addMoneyMessage');

  addMoneyButton.addEventListener('click', async () => {
      const amount = parseFloat(addMoneyInput.value);

      if (!amount || amount <= 0) {
          addMoneyMessage.textContent = 'Please enter a valid amount.';
          addMoneyMessage.style.color = 'red';
          return;
      }

      try {
          const response = await fetch('/wallet/add-money', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify({ amount })
          });

          const data = await response.json();

          if (response.ok) {
              addMoneyMessage.textContent = 'Money added successfully!';
              addMoneyMessage.style.color = 'green';
              document.querySelector('.wallet-amount').textContent = `₹${data.totalBalance.toFixed(2)}`;
              renderTransactions(data.transactions);  
          } else {
              addMoneyMessage.textContent = data.error || 'Failed to add money.';
              addMoneyMessage.style.color = 'red';
          }
      } catch (error) {
          console.error('Error:', error);
          addMoneyMessage.textContent = 'An error occurred. Please try again.';
          addMoneyMessage.style.color = 'red';
      }
  });
</script>
            
            <!-- Address manager -->

            <div class="tab-pane fade" id="address" role="tabpanel" aria-labelledby="address-tab">
              <div class="dashboard-right-box">
                <div class="address-tab">
                  <div class="sidebar-title">
                    <div class="loader-line"></div>
                    <h4>My Address Details</h4>
                  </div>
                  <div class="row gy-3">
                      <div id="currentAddresses">
                    <!-- Existing addresses will be here -->
                  </div>
                    <% if (userAddress && userAddress.length> 0) { %>
                      <% userAddress.forEach((addressGroup)=> { %>
                        <% addressGroup.address.forEach(( address, index)=> { %>
                          <div id="address-<%= address._id %>" class="col-xxl-4 col-md-6">
                            <div class="address-option">
                              <label for="address-billing-<%= index %>">
                                <span class="delivery-address-box">
                                  <span class="form-check">
                                    <input class="custom-radio" id="address-billing-<%= index %>" type="radio"
                                      name="radio">
                                  </span>
                                  <span class="address-detail">
                                    <span class="address">
                                      <span class="address-title">
                                        <%= address.addressType %>
                                      </span>
                                    </span>
                                    <span class="address">
                                      <span class="address-home">
                                        <span class="address-tag">Address:</span>
                                        <%= address.landMark %>, <%=  address.state %>
                                      </span>
                                    </span>
                                    <span class="address">
                                      <span class="address-home">
                                        <span class="address-tag">Pin Code:</span>
                                        <%= address.pinCode %>
                                      </span>
                                    </span>
                                    <span class="address">
                                      <span class="address-home">
                                        <span class="address-tag">Phone:</span>
                                        <%= address.phone %>
                                      </span>
                                    </span>
                                  </span>
                                </span>
                                <span class="buttons">
                                  <a class="btn btn_black sm" href="/editAddress?id=<%= address._id %>" title="Edit">Edit</a>
                                  <button class="btn btn_outline sm" href="" onclick="deleteAddress('<%= address._id %>')" title="Delete">Delete</button>
                                </span>
                              </label>
                            </div>
                          </div>
                          <% }); %>
                            <% }); %>
                              <% } else { %>
                                <p>No addresses found.</p>
                                <% } %>
                      </div>

                  <a class="btn add-address" data-bs-toggle="modal" data-bs-target="#add-address" title="Quick View"
                    href="" tabindex="0" id="addNewAddress">+ Add Address</a>
                </div>
                <!-- Add Address Modal -->
                <div class="modal fade" id="add-address" tabindex="-1" aria-labelledby="addAddressLabel"
                  aria-hidden="true">
                  <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                      <div class="modal-header border-0">
                        <div class="sidebar-title">
                          <div class="loader-line"></div>
                          <h4>Add New Address</h4>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                      </div>
                      <div class="modal-body">
                        <form id="addressForm"    class="address-form">
                          <!-- Address Type Selection -->
                          <div class="mb-4">
                            <div class="form-check form-check-inline">
                              <input class="custom-radio" type="radio" name="addressType" id="homeAddress" value="home"
                                checked required>
                              <label class="form-check-label" for="homeAddress">Home</label>
                            </div>
                            <div class="form-check form-check-inline">
                              <input class="custom-radio" type="radio" name="addressType" id="officeAddress"
                                value="office" required>
                              <label class="form-check-label" for="officeAddress">Office</label>
                            </div>
                            <div class="form-check form-check-inline">
                              <input class="custom-radio" type="radio" name="addressType" id="otherAddress"
                                value="others" required>
                              <label class="form-check-label" for="otherAddress">Others</label>
                            </div>
                          </div>

                          <!-- Name Field -->
                          <div class="mb-3">
                            <label class="form-label">Full Name</label>
                            <input type="text" class="form-control" name="name" minlength="3" maxlength="50">
                          </div>

                          <!-- City and State -->
                          <div class="row mb-3">
                            <div class="col-md-6">
                              <label class="form-label">City</label>
                              <input type="text" class="form-control" name="city" minlength="2" required>
                            </div>
                            <div class="col-md-6">
                              <label class="form-label">State</label>
                              <input type="form-control" name="state" minlength="2" required>
                            </div>
                          </div>

                          <!-- Landmark -->
                          <div class="mb-3">
                            <label class="form-label">Landmark</label>
                            <input type="text" class="form-control" name="landMark" minlength="3" required>
                          </div>

                          <!-- Pin Code -->
                          <div class="mb-3">
                            <label class="form-label">PIN Code</label>
                            <input type="text" class="form-control" name="pinCode" pattern="[0-9]{6}" maxlength="6" required>
                          </div>

                          <!-- Phone Numbers -->
                          <div class="row mb-3">
                            <div class="col-md-6">
                              <label class="form-label">Phone Number</label>
                              <input type="tel" class="form-control" name="phone" pattern="[0-9]{10}" maxlength="10" required>
                            </div>
                            <div class="col-md-6">
                              <label class="form-label">Alt Phone (Optional)</label>
                              <input type="tel" class="form-control" name="altPhone" pattern="[0-9]{10}" maxlength="10">
                            </div>
                          </div>

                          <!-- Submit Buttons -->
                          <div class="modal-footer border-0 pt-0">
                            <button type="button" class="btn btn_outline" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn add-address">Save Address</button>
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- JavaScript Validation -->
                <script>
                  document.getElementById("addressForm").addEventListener('DOMContentLoaded',"submit", function (e) {
                    e.preventDefault(); // Prevent form submission for validation

                    const form = e.target;
                    let isValid = true;

                    // Clear previous errors
                    form.querySelectorAll(".form-control").forEach((field) => {
                      field.style.borderColor = "";
                    });
                    form.querySelectorAll(".error-message").forEach((msg) => msg.remove());

                    // Helper function to show validation errors
                    function showValidationError(field, message) {
                      field.style.borderColor = "#dc3545";
                      const errorMessage = document.createElement("small");
                      errorMessage.className = "error-message text-danger";
                      errorMessage.textContent = message;
                      field.closest("div").appendChild(errorMessage);
                      isValid = false;
                    }

                    // Validate Name
                    const nameField = form.name;
                    if (nameField.value.length < 3 || nameField.value.length > 50) {
                      showValidationError(nameField, "Name must be between 3 and 50 characters.");
                    }

                    // Validate City
                    const cityField = form.city;
                    if (cityField.value.length < 2) {
                      showValidationError(cityField, "City must be at least 2 characters.");
                    }

                    // Validate State
                    const stateField = form.state;
                    if (stateField.value.length < 2) {
                      showValidationError(stateField, "State must be at least 2 characters.");
                    }

                    // Validate Landmark
                    const landMarkField = form.landMark;
                    if (landMarkField.value.length < 3) {
                      showValidationError(landMarkField, "Landmark must be at least 3 characters.");
                    }

                    // Validate PIN Code
                    const pinCodeField = form.pinCode;
                    if (!/^\d{6}$/.test(pinCodeField.value)) {
                      showValidationError(pinCodeField, "PIN Code must be exactly 6 digits.");
                    }

                    // Validate Phone Number
                    const phoneField = form.phone;
                    if (!/^\d{10}$/.test(phoneField.value)) {
                      showValidationError(phoneField, "Phone number must be exactly 10 digits.");
                    }


                    // Submit the form if all fields are valid
                    if (isValid) {
                      form.submit();
                    }
                  });

                </script>

              </div>
            </div>
            <!-- <div class="tab-pane fade" id="privacy" role="tabpanel" aria-labelledby="privacy-tab"> 
                <div class="dashboard-right-box">
                  <div class="privacy-tab">
                    <div class="sidebar-title">
                      <div class="loader-line"></div>
                      <h4>Privacy</h4>
                    </div>
                    <div class="row"> 
                      <div class="col-12"> 
                        <div class="privacy-title">
                          <h5>Allows others to see my profile</h5>
                          <p>Choose who can access your app and if users need to <a href="sign-up.html"> sign up.</a></p>
                        </div><span class="short-title">access</span>
                        <ul class="privacy-items">
                          <li> 
                            <div class="privacy-icon"> <i class="iconsax" data-icon="lock-2"></i></div>
                            <div class="privacy-contant"> 
                              <h6>Private</h6>
                              <p>Only users you choose can access</p>
                            </div>
                            <label class="switch">
                              <input type="checkbox" checked=""><span class="slider round"></span>
                            </label>
                          </li>
                          <li> 
                            <div class="privacy-icon"> <i class="iconsax" data-icon="globe"></i></div>
                            <div class="privacy-contant"> 
                              <h6>Public</h6>
                              <p>Anyone with the link can</p>
                            </div>
                            <label class="switch">
                              <input type="checkbox"><span class="slider round"></span>
                            </label>
                          </li>
                        </ul><span class="short-title">Users</span>
                        <ul class="privacy-items">
                          <li> 
                            <div class="privacy-icon"> <i class="iconsax" data-icon="package"></i></div>
                            <div class="privacy-contant"> 
                              <h6>Users in the users table </h6>
                              <p>Only users in the users table can sign in </p>
                            </div>
                            <label class="switch">
                              <input type="checkbox" checked=""><span class="slider round"></span>
                            </label>
                          </li>
                          <li> 
                            <div class="privacy-icon"> <i class="iconsax" data-icon="fingerprint-circle"></i></div>
                            <div class="privacy-contant"> 
                              <h6>ongoing production team </h6>
                              <p>only members of your team can sign in </p>
                            </div>
                            <label class="switch">
                              <input type="checkbox"><span class="slider round"></span>
                            </label>
                          </li>
                          <li> 
                            <div class="privacy-icon"> <i class="iconsax" data-icon="add-layer"></i></div>
                            <div class="privacy-contant"> 
                              <h6>anyone form domain(s)</h6>
                              <p>only users with your email domain </p>
                            </div>
                            <label class="switch">
                              <input type="checkbox" checked=""><span class="slider round"></span>
                            </label>
                          </li>
                          <li> 
                            <div class="privacy-icon"> <i class="iconsax" data-icon="mail"></i></div>
                            <div class="privacy-contant"> 
                              <h6>any email in table </h6>
                              <p>Anyone with email included in a table </p>
                            </div>
                            <label class="switch">
                              <input type="checkbox"><span class="slider round"></span>
                            </label>
                          </li>
                        </ul><span class="short-title"> </span>
                        <ul class="privacy-items">
                          <li> 
                            <div class="privacy-contant"> 
                              <h6>Publishing </h6>
                              <p>Your Project is Published</p>
                            </div>
                            <div class="publish-button"> 
                              <button class="btn">Unpublish</button>
                            </div>
                          </li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div> -->
          </div>
        </div>
      </div>
    </div>
  </section>
  <script>
document.addEventListener('DOMContentLoaded', function () {
    const addressForm = document.getElementById('addressForm');
    if (addressForm) {
        addressForm.addEventListener('submit', async (event) => {
            console.log("Form submission intercepted");
            event.preventDefault();

            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData.entries());

            try {
                const response = await fetch('/profile/add-address', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });

                if (response.ok) {
                    const result = await response.json();

                    if (result.success) {
                        console.log("Address added successfully");
                        addNewAddress(result.address);

                        Swal.fire({
                            icon: "success",
                            title: "Address Added Successfully!",
                            showConfirmButton: false,
                            timer: 1500,
                        });

                        const modal = bootstrap.Modal.getInstance(document.getElementById('add-address'));
                        if (modal) {
                            modal.hide();
                        }

                        // Ensure backdrop is removed
                        document.querySelectorAll('.modal-backdrop').forEach(backdrop => backdrop.remove());
                        document.body.classList.remove('modal-open');
                        document.body.style.overflow = 'auto';
                    } else {
                        throw new Error(result.message || "Failed to add address.");
                    }
                } else {
                    throw new Error("Server responded with an error.");
                }
            } catch (error) {
                console.error("Error details:", error);

                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "Could not add the address. Please try again.",
                });
            }
        });
    }

    document.addEventListener('click', (event) => {
        if (event.target.matches('.btn-outline')) {
            console.log('Delete button clicked');
            deleteAddress(event.target.dataset.id);
        } else if (event.target.matches('.btn-black')) {
            console.log('Edit button clicked');
            editAddress(event.target.dataset.id);
        }
    });

    function addNewAddress(address) {
        const addressContainer = document.getElementById("currentAddresses");
        if (!addressContainer) {
            console.error("Address container not found");
            return;
        }

        const index = document.querySelectorAll(".address-option").length;

        const addressHTML = `
            <div id="address-${ address._id }" class="col-xxl-4 col-md-6">
                <div class="address-option">
                    <label for="address-billing-${index}">
                        <span class="delivery-address-box">
                            <span class="form-check">
                                <input class="custom-radio" id="address-billing-${index}" type="radio" name="radio">
                            </span>
                            <span class="address-detail">
                                <span class="address">
                                    <span class="address-title">${address.addressType}</span>
                                </span>
                                <span class="address">
                                    <span class="address-home">
                                        <span class="address-tag">Address:</span> ${address.landMark}, ${address.state}
                                    </span>
                                </span>
                                <span class="address">
                                    <span class="address-home">
                                        <span class="address-tag">Pin Code:</span> ${address.pinCode}
                                    </span>
                                </span>
                                <span class="address">
                                    <span class="address-home">
                                        <span class="address-tag">Phone:</span> ${address.phone}
                                    </span>
                                </span>
                            </span>
                        </span>
                        <span class="buttons">
                                  <a class="btn btn_black sm" href="/editAddress?id=${address._id }" title="Edit">Edit</a>
                                  <button class="btn btn_outline sm" href="" onclick="deleteAddress('${ address._id }')" title="Delete">Delete</button>
                                </span>
                    </label>
                </div>
            </div>
        `;

        addressContainer.innerHTML += addressHTML;
    }
});


</script>

<script>
async function deleteAddress(id) {
    try {
         const result = await Swal.fire({
            title: 'Are you sure?',
            text: 'Do you really want to delete this address? This action cannot be undone.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'Cancel'
        });

         if (result.isConfirmed) {
            const response = await fetch(`/delete-address/${id}`, {
                method: 'DELETE',
            });

             if (!response.ok) {
                throw new Error('Failed to delete the address.');
            }

             const addressElement = document.getElementById(`address-${id}`);
            if (addressElement) {
                addressElement.style.display = 'none';
            }

             Swal.fire('Deleted!', 'Address has been deleted.', 'success');
        }
    } catch (error) {
        Swal.fire('Error!', error.message || 'Something went wrong.', 'error');
    }
}


</script>

<script>
        
  async function addToCart(productId) {
    const quantity= 1
    try {
       const response = await fetch('/cart/add',{
        method:'POST',
        headers:{
          'Content-Type': 'application/json'
        },body:JSON.stringify({productId,quantity})

      })
      const data = await response.json()
      if(response.ok){
       Toastify({
                text: "Product added to cart successfully!",
                duration: 3000,
                close: true,
                gravity: "top", // `top` or `bottom`
                position: "right", // `left`, `center` or `right`
                backgroundColor: "#28a745", // Success color (green)
                stopOnFocus: true, // Prevents dismissing on hover
            }).showToast();
        } else {
            Toastify({
                text: data.message || "Error adding to cart",
                duration: 3000,
                close: true,
                gravity: "top",
                position: "right",
                backgroundColor: "#dc3545", // Error color (red)
                stopOnFocus: true,
                 style: {
                  color: "#ffffff", // Text color
                fontSize: "16px", // Optional: Adjust font size
                },
            }).showToast();
        }
    } catch (error) {
        console.error("Error:", error.message);
        Toastify({
            text:  "Something went wrong. Please try again.",
            duration: 3000,
            close: true,
            gravity: "top",
            position: "right",
            backgroundColor: "#dc3545",
            stopOnFocus: true,
            style: {
                  color: "#ffffff", // Text color
                fontSize: "16px", // Optional: Adjust font size
                },
        }).showToast();
    }
}
      </script>
  <!-- Add SweetAlert -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

 

  <%- include('../partials/user/footer') %>

  <%- include('../partials/user/footer') %>